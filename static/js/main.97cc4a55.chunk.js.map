{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","types/SelectValue.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","utils/getVisibleTodos.ts","App.tsx","index.tsx"],"names":["TodoList","React","memo","todos","showModal","selectedTodo","className","map","todo","id","title","completed","isSelected","cn","type","onClick","TodoFilter","handleSelect","query","handleInput","clearInput","onChange","value","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","SelectValue","getUser","userId","a","Error","Loader","TodoModal","closeModal","useState","user","setUser","hasError","setHasError","useEffect","fetchUser","userFromServer","href","email","name","App","loading","setLoading","setTodos","setSelectedTodo","ALL","selectValue","setSelectValue","setQuery","appliedQuery","setAppliedQuery","applyQuery","useCallback","debounce","event","target","visibleTodos","useMemo","select","filteredTodos","filter","ACTIVE","COMPLETED","toLowerCase","includes","getVisibleTodos","fetchTodos","todosFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.97cc4a55.chunk.js","sourcesContent":["import React from 'react';\nimport cn from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n  showModal: (todo: Todo) => void;\n  selectedTodo: Todo | null;\n};\n\nexport const TodoList: React.FC<Props> = React.memo(({\n  todos,\n  showModal,\n  selectedTodo,\n}) => {\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => {\n          const { id, title, completed } = todo;\n          const isSelected = selectedTodo?.id === id;\n\n          return (\n            <tr\n              data-cy=\"todo\"\n              className={cn({\n                'has-background-info-light': isSelected,\n              })}\n              key={id}\n            >\n              <td className=\"is-vcentered\">{id}</td>\n              <td className=\"is-vcentered\">\n                {completed && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n              </td>\n              <td className=\"is-vcentered is-expanded\">\n                <p\n                  className={cn({\n                    'has-text-success': completed,\n                    'has-text-danger': !completed,\n                  })}\n                >\n                  {title}\n                </p>\n              </td>\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => showModal(todo)}\n                >\n                  <span className=\"icon\">\n                    <i\n                      className={cn('far', {\n                        'fa-eye': !isSelected,\n                        'fa-eye-slash': isSelected,\n                      })}\n                    />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n});\n","import React from 'react';\n\ntype Props = {\n  handleSelect: (event: React.ChangeEvent<HTMLSelectElement>) => void,\n  query: string,\n  handleInput: (event: React.ChangeEvent<HTMLInputElement>) => void,\n  clearInput: () => void,\n};\n\nexport const TodoFilter: React.FC<Props> = React.memo(({\n  handleSelect, query, handleInput, clearInput,\n}) => {\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={handleSelect}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleInput}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={clearInput}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n});\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promime\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see now the laoder works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = async (userId: number) => {\n  try {\n    return await get<User>(`/users/${userId}`);\n  } catch (error) {\n    throw new Error(`Oops: ${error}`);\n  }\n};\n","export const enum SelectValue {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = React.memo(() => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n));\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  todo: Todo;\n  closeModal: () => void;\n};\n\nexport const TodoModal: React.FC<Props> = React.memo(({ todo, closeModal }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [hasError, setHasError] = useState(false);\n  const {\n    title,\n    id,\n    completed,\n    userId,\n  } = todo;\n\n  useEffect(() => {\n    const fetchUser = async () => {\n      try {\n        const userFromServer = await getUser(userId);\n\n        setUser(userFromServer);\n      } catch (error) {\n        setHasError(true);\n      }\n    };\n\n    fetchUser();\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={closeModal}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            {hasError\n              ? <span>No user on server</span>\n              : (\n                <p className=\"block\" data-cy=\"modal-user\">\n                  {completed\n                    ? <strong className=\"has-text-success\">Done</strong>\n                    : <strong className=\"has-text-danger\">Planned</strong>}\n\n                  {' by '}\n\n                  <a href={`mailto:${user.email}`}>\n                    {user.name}\n                  </a>\n                </p>\n              )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n});\n","import { SelectValue } from '../types/SelectValue';\nimport { Todo } from '../types/Todo';\n\nexport const getVisibleTodos = (\n  todos: Todo[],\n  select: string,\n  query: string,\n): Todo[] => {\n  let filteredTodos = todos.filter(todo => {\n    switch (select) {\n      case SelectValue.ACTIVE:\n        return !todo.completed;\n\n      case SelectValue.COMPLETED:\n        return todo.completed;\n\n      case SelectValue.ALL:\n        return true;\n\n      default:\n        throw new Error('Invalid filter property');\n    }\n  });\n\n  if (query) {\n    filteredTodos = filteredTodos.filter(\n      ({ title }) => title.toLowerCase().includes(query.toLowerCase()),\n    );\n  }\n\n  return filteredTodos;\n};\n","/* eslint-disable max-len */\nimport React, {\n  useCallback, useEffect, useMemo, useState,\n} from 'react';\nimport { debounce } from 'lodash';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { getVisibleTodos } from './utils/getVisibleTodos';\nimport { SelectValue } from './types/SelectValue';\n\nexport const App: React.FC = () => {\n  const [loading, setLoading] = useState(true);\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [selectValue, setSelectValue] = useState(SelectValue.ALL);\n  const [query, setQuery] = useState('');\n  const [appliedQuery, setAppliedQuery] = useState('');\n  const [hasError, setHasError] = useState(false);\n\n  const applyQuery = useCallback(debounce(setAppliedQuery, 1000), []);\n\n  const clearInput = useCallback(() => {\n    setQuery('');\n    setAppliedQuery('');\n  }, []);\n\n  const handleInput = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value);\n    applyQuery(event.target.value);\n  }, []);\n\n  const visibleTodos = useMemo(() => {\n    return getVisibleTodos(todos, selectValue, appliedQuery);\n  }, [selectValue, appliedQuery, todos]);\n\n  const handleSelect = useCallback((event: React.ChangeEvent<HTMLSelectElement>) => setSelectValue(event.target.value as SelectValue), []);\n\n  useEffect(() => {\n    const fetchTodos = async () => {\n      try {\n        const todosFromServer = await getTodos();\n\n        setLoading(false);\n        setTodos(todosFromServer);\n      } catch (error) {\n        setHasError(true);\n        setLoading(false);\n      }\n    };\n\n    fetchTodos();\n  }, []);\n\n  const showModal = useCallback((todo: Todo) => setSelectedTodo(todo), []);\n  const closeModal = useCallback(() => setSelectedTodo(null), []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                handleSelect={handleSelect}\n                query={query}\n                handleInput={handleInput}\n                clearInput={clearInput}\n              />\n            </div>\n\n            {hasError\n              ? <span> No todos from server</span>\n              : (\n                <div className=\"block\">\n                  {loading\n                    ? <Loader />\n                    : (\n                      <TodoList\n                        todos={visibleTodos}\n                        showModal={showModal}\n                        selectedTodo={selectedTodo}\n                      />\n                    )}\n                </div>\n              )}\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && <TodoModal todo={selectedTodo} closeModal={closeModal} />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}